# Generated by Django 5.1.3 on 2024-12-05 14:44

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import model_manager.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CadevilUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'},
                                              help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True,
                                              validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                                              verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True,
                                        serialize=False)),
                ('is_staff',
                 models.BooleanField(default=False, help_text='Designates whether the user can use moderation tools.',
                                     verbose_name='is staff')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates whether the user can log into this admin site.',
                                                     verbose_name='is superuser')),
                ('view_hidden',
                 models.BooleanField(default=False, help_text='Designates whether this user can view hidden content.',
                                     verbose_name='view hidden')),
                ('active_calculations',
                 models.IntegerField(default=0, help_text='Number of currently active calculations.',
                                     verbose_name='active calculations')),
                ('max_calculations',
                 models.IntegerField(default=1, help_text='Number of currently active calculations.',
                                     verbose_name='maximum concurrent active calculations')),
                ('theme',
                 models.CharField(choices=[('light', 'Light'), ('dark', 'Dark'), ('auto', 'Auto')], default='auto',
                                  help_text='Preferred theme for the user interface.', max_length=10,
                                  verbose_name='theme')),
                ('groups', models.ManyToManyField(blank=True,
                                                  help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name='user_set', related_query_name='user', to='auth.group',
                                                  verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                                            related_name='user_set', related_query_name='user',
                                                            to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'library_cadeviluser',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CadevilDocument',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True,
                                        serialize=False)),
                ('is_active', models.BooleanField(default=True)),
                ('description', models.CharField(blank=True, db_index=True, max_length=255)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'archicad_eval_document',
            },
        ),
        migrations.CreateModel(
            name='BuildingMetrics',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True,
                                        serialize=False)),
                ('grundstuecksfläche', models.FloatField(default=0.0, verbose_name='GF')),
                ('grundstuecksfläche_unit', models.CharField(default='m2', max_length=10)),
                ('bebaute_fläche', models.FloatField(default=0.0, verbose_name='BF')),
                ('bebaute_fläche_unit', models.CharField(default='m2', max_length=10)),
                ('unbebaute_fläche', models.FloatField(default=0.0, verbose_name='UF')),
                ('unbebaute_fläche_unit', models.CharField(default='m2', max_length=10)),
                ('brutto_rauminhalt', models.FloatField(default=0.0, verbose_name='BRI')),
                ('brutto_rauminhalt_unit', models.CharField(default='m3', max_length=10)),
                ('brutto_grundfläche', models.FloatField(default=0.0, verbose_name='BGF')),
                ('brutto_grundfläche_unit', models.CharField(default='m2', max_length=10)),
                ('konstruktions_grundfläche', models.FloatField(default=0.0, verbose_name='KGF')),
                ('konstruktions_grundfläche_unit', models.CharField(default='m2', max_length=10)),
                ('netto_raumfläche', models.FloatField(default=0.0, verbose_name='NRF')),
                ('netto_raumfläche_unit', models.CharField(default='m2', max_length=10)),
                ('bgf_bf_ratio', models.FloatField(default=0.0, verbose_name='BGF/BF')),
                ('bri_bgf_ratio', models.FloatField(default=0.0, verbose_name='BRI/BGF')),
                ('fassadenflaeche', models.FloatField(default=0.0, verbose_name='Facade Area')),
                ('fassadenflaeche_unit', models.CharField(default='m2', max_length=10)),
                ('stockwerke', models.FloatField(default=0.0, verbose_name='Stockwerke')),
                ('energie_bewertung', models.CharField(default='Unknown', max_length=50, verbose_name='Energy Rating')),
                ('project',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='building_metrics',
                                   to='model_manager.cadevildocument')),
            ],
            options={
                'verbose_name': 'Gebäude Kenndaten',
                'verbose_name_plural': 'Gebäude Kenndaten',
                'db_table': 'building_metrics',
            },
        ),
        migrations.CreateModel(
            name='FileUpload',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True,
                                        serialize=False)),
                ('document', models.FileField(upload_to=model_manager.models.user_directory_path)),
                ('description', models.CharField(blank=True, db_index=True, max_length=255)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'archicad_eval_uploads',
            },
        ),
        migrations.AddField(
            model_name='cadevildocument',
            name='upload',
            field=models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE,
                                    related_name='user_file_upload', to='model_manager.fileupload'),
        ),
        migrations.AddField(
            model_name='cadeviluser',
            name='uploads',
            field=models.ManyToManyField(blank=True, related_name='file_upload', to='model_manager.fileupload'),
        ),
        migrations.CreateModel(
            name='MaterialProperties',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True,
                                        serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('global_brutto_price',
                 models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('local_brutto_price',
                 models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('local_netto_price',
                 models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('volume', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('area', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('length', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('mass', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                (
                'penrt_ml', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('gwp_ml', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('ap_ml', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('recyclable_mass',
                 models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('waste_mass',
                 models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('project',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='material_properties',
                                   to='model_manager.cadevildocument')),
            ],
            options={
                'verbose_name_plural': 'Material properties',
                'db_table': 'material_properties',
            },
        ),
    ]
